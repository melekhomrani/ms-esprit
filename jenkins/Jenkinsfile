pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://localhost:8081'
        NEXUS_REPO = 'maven-releases'
        NEXUS_CRED = credentials('nexus-credentials')
    }

    stages {
        stage('Build JARs') {
            steps {
                sh 'jenkins/scripts/build_jars.sh'
            }
        }

        stage('Deploy JARs to Nexus') {
            steps {
                sh 'jenkins/scripts/deploy_jars.sh'
            }
        }

        stage('Build and Run Authentication Service') {
            steps {
                withCredentials([
                    string(credentialsId: 'KEYCLOAK_SERVER_URL', variable: 'KEYCLOAK_SERVER_URL'),
                    string(credentialsId: 'KEYCLOAK_REALM', variable: 'KEYCLOAK_REALM'),
                    string(credentialsId: 'KEYCLOAK_CLIENT_ID', variable: 'KEYCLOAK_CLIENT_ID'),
                    string(credentialsId: 'KEYCLOAK_CLIENT_SECRET', variable: 'KEYCLOAK_CLIENT_SECRET'),
                    usernamePassword(credentialsId: 'KEYCLOAK_CREDENTIALS', usernameVariable: 'KEYCLOAK_USERNAME', passwordVariable: 'KEYCLOAK_PASSWORD')
                ]) {
                    sh '''
                        export KEYCLOAK_SERVER_URL=$KEYCLOAK_SERVER_URL
                        export KEYCLOAK_REALM=$KEYCLOAK_REALM
                        export KEYCLOAK_CLIENT_ID=$KEYCLOAK_CLIENT_ID
                        export KEYCLOAK_CLIENT_SECRET=$KEYCLOAK_CLIENT_SECRET
                        export KEYCLOAK_USERNAME=$KEYCLOAK_USERNAME
                        export KEYCLOAK_PASSWORD=$KEYCLOAK_PASSWORD
                        jenkins/scripts/build_run_authentication.sh
                    '''
                }
            }
        }

        stage('Start Dependencies and Keycloak Realm Import') {
            steps {
                sh 'jenkins/scripts/start_dependencies.sh'
            }
        }

        stage('Wait for Databases Ready') {
            steps {
                script {
                    waitForContainerHealth('keycloakdb', 'pg_isready -U keycloak')
                    waitForContainerHealth(
                        'productdb',
                        "mongo --username root --password root --eval \"db.adminCommand('ping')\""
                    )
                    waitForContainerHealth('manufacturerdb', 'mysqladmin ping -u root -proot')
                }
            }
        }

        stage('Wait for Zookeeper and Kafka Ready') {
            steps {
                script {
                    waitForLogReady('zookeeper', 'binding to port')
                    waitForLogReady('kafka', 'started')
                }
            }
        }

        stage('Wait for Keycloak Ready') {
            steps {
                script {
                    waitForHttpService('http://localhost:18080/health/ready')
                }
            }
        }

        stage('Build and Run Config Server') {
            steps {
                sh 'jenkins/scripts/build_run_config_server.sh'
            }
        }

        stage('Wait for Config Server Ready') {
            steps {
                script {
                    waitForHttpService('http://localhost:8888/actuator/health')
                }
            }
        }

        stage('Build and Run Eureka Server') {
            steps {
                sh 'jenkins/scripts/build_run_eureka_server.sh'
            }
        }

        stage('Wait for Eureka Server Ready') {
            steps {
                script {
                    waitForHttpService('http://localhost:8761/actuator/health')
                }
            }
        }

        stage('Build and Run Gateway') {
            steps {
                sh 'jenkins/scripts/build_run_gateway.sh'
            }
        }

        stage('Wait for Gateway Ready') {
            steps {
                script {
                    waitForHttpService('http://localhost:8989/actuator/health')
                }
            }
        }

        stage('Build and Run Microservices') {
            steps {
                sh 'jenkins/scripts/build_run_microservices.sh'
            }
        }
    }

    post {
        always {
            script {
                junit '**/target/surefire-reports/*.xml'
            }
        }
        success {
            echo 'Pipeline completed successfully. All services are built, deployed to Nexus, and running.'
        }
        failure {
            echo 'Pipeline failed.'
            mail to: 'melek@store.com',
                subject: "Jenkins Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """\
                    The Jenkins pipeline for ${env.JOB_NAME} has failed.

                    Check details and console output:
                    ${env.BUILD_URL}

                    Action is required.
                    """
        }
    }
}
